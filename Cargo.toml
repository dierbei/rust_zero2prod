[package]
name = "zero2prod"
version = "0.1.0"
authors = ["Hedui <1628652790@qq.com>"]
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[lib]
# We could use any path here, but we are following the community convention
# We could specify a library name using the `name` field. If unspecified,
# cargo will default to `package.name`, which is what we want.
path = "src/lib.rs"

# Notice the double square brackets: it's an array in TOML's syntax.
# We can only have one library in a project, but we can have multiple binaries!
# If you want to manage multiple libraries in the same repository
# have a look at the workspace feature - we'll cover it later on.
[[bin]]
path = "src/main.rs"
name = "zero2prod"

[dependencies]
# web framework
actix-web = "4"
actix-http = "3.2.2"

# We need the optional `derive` feature to use `serde`'s procedural macros:
# `#[derive(Serialize)]` and `#[derive(Deserialize)]`.
# The feature is not enabled by default to avoid pulling in
# unnecessary dependencies for projects that do not need it.
serde = { version = "1", features = ["derive"]}

# 读取 yaml 配置文件
config = { version = "0.11.0", default-features = false, features = ["yaml"] }

# 生成uuid
uuid = { version = "0.8.1", features = ["v4"] }

# 时间
chrono = "0.4.15"

# 全局日志
env_logger = "0.10.0"

# 手动打印日志
log = "0.4.17"

# 链路追踪
tracing = { version = "0.1", features = ["log"] }
# Instrument
tracing-futures = "0.2.5"
# subscriber
tracing-subscriber = { version = "0.2.12", features = ["registry", "env-filter"] }
# format e.json
tracing-bunyan-formatter = "0.2"
tracing-log = "0.1.3"
tracing-actix-web = "0.7.2"


# Using table-like toml syntax to avoid a super-long line!
[dependencies.sqlx]
version = "0.5.7"
default-features = false
features = [
    "runtime-actix-rustls", # tells sqlx to use the actix runtime for its futures and rustls as TLS backend;
    "macros",
    "postgres", # unlocks Postgres-specific functionality
    "uuid", #  support for mapping SQL UUIDs to the Uuid type from the uuid crate. We need it to work with our id column;
    "chrono", # adds support for mapping SQL timestamptz to the DateTime<T> type from the chrono crate. We need it to work with our subscribed_at column
    "migrate" # gives us access to the same functions used under the hood by sqlx-cli to manage migrations. It will turn out to be useful for our test suite
]

[dev-dependencies]
actix-rt = "2.8.0"
# sync once
once_cell = "1.17.1"

# http request
reqwest = "0.11.14"
tokio = "1.25.0"
